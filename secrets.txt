We want to encrypt secrets locally, small secrets like passwords or secret keys.
The most effective way to do this is probably with built-in tools like openssl and snakeoil certs
(or certs that have been issues to the machine).
We could also generate our own key in the module directory to use for encipherment.
We should keep the key plain..but allow password for decoding the secret.
So you need the key, and the password, but not the password to the key, the password for the secret you want.
Alternatively..we could create keys indefinitely..and maintain an index of which key was for which secret.
The user would have to remember each individual password for each secret they created.

Using `openssl enc` we can encrypt and decrypt secrets with symmetric keys.
Those symmetric keys should be encrypted asymmetrically using keys issued to us or issues to ourself.


Two-stage decryption:
Master key / password decrypts symmetric key for database,
Database is decrypted,
Secret is decrypted with freshly revealed key material and IV retrieved from table record


Master key could XOR against .db files.

      Master Key
          |
          v

| user_id:enc_um(user_key):user_salt:user_iv

       keys.db

key_m = pbkdf2('master key text')

iv_a is chosen at random
salt_a is chosen at random
key_a is chosen at random

secret_id is a string like 'mysecret'

id_a = hash(secret_id+salt_a)

enc_m(key_a) = key_a | openssl -iv iv_a -e -aes256 -K key_m -S salt_a

/*******************************\
| id_a:enc_m(key_a):salt_a:iv_a |
\*******************************/

key_a is the key material decrypted in phase 1
id_a is the id from keys.db
id_sa = hash(key_a+id_a)
secret is the secret text like 'this is the secret'
enc_a(secret) = openssl -iv iv_sa -e -aes256 -K key_a -p password? -S salt_sa

      secrets.db

/************************************\
| id_sa:enc_a(secret):salt_sa:iv_sa |
\************************************/

perhaps the SecretsEngine talks to Keys for keys and Secrets for secrets

we should use locks on the filesystem to determine if anyone else is talking to the same database

should we be an importable module or a standalone service...maybe provide opportunities for both

using ',' as delimeter may lead to disaster...we should look at better db implementation

we use anonymous pipes for IPC
we should use asyncio to talk to the pipes
we should keywrap if we are going to use pipes
use 'selectors' module to handle i/o wait on pipes

we should use sql-like functions as pluggable drivers
